######                           POSTFIX MAIN CONFIGURATION TEMPLATE                          ######
######    THIS IS THE BIG COMMENTED ALL OPTIONS MAIN CONFIGURATION TEMPLATE FOR POSTFIX       ######
######    USE THIS MOSTLY AS A REFERRENCE TO SEE AND UNDERSTAND WHAT OPTIONS ARE AVAILABLE    ######

####################################    SYSTEM CONFIGURATION     ###################################

# THE COMPATIBILITY LEVEL BELOW DETERMINES WHAT DEFAULT SETTINGS WILL POSTFIX USE FOR MAIN.CF AND MASTER.CF
compatibility_level = 2

# LOCATION OF THE POST COMMANDS: POSTCONF, POSTDROP, POSTQUEUE, POSTSUPER, POSTMAP, POSTFIX
# command_directory=/usr/sbin

# THE POSTFIX DAEMONS WOULD BE: SMTPD, QMQPD, LMTPD, PICKUP, POSTSCREEN, QMGR, VERIFY, LOCAL, VIRTUAL, CLEANUP, BOUNCE, MASTER
daemon_directory=/usr/lib/postfix/sbin
# THE DATA DIRECTORY IS NOT THE SPOOL DIRECTORY. IN THE WRITABLE DATA DIRECTORY WE HAVE CACHE, AND LOCK FILES MOSTLY
data_directory=/var/lib/postfix
# THERE IS ANOTHER DIRECTORY FOR QUEUES AND VARIOUS POSTFIX SPOOLS BUT THAT IS SPECIFIED AT COMPILATION (/var/spool/postfix)
config_directory=/etc/postfix
default_database_type = hash

# THE MAIL SYSTEM NAME THAT IS DISPLAYED IN RECEIVED: HEADERS, IN THE SMTP GREETING BANNER, AND IN BOUNCED MAIL.
mail_name = PostfixSrv
# mail_version = 3.5.X
smtpd_banner = $myhostname ESMTP $mail_name (Custom/GNU)

# MYORIGIN IS AUTOMATICALLY APPENDED TO UNQUALIFIED MAILS FOR ALL LOCAL_HEADER_REWRITE_CLIENTS
mydomain = packets.lab
myhostname = mx.packets.lab
myorigin = $myhostname
smtp_helo_name = $myhostname

# IS PREFERABLE TO USE MYNETWORKS TO LIST ALL THE LOCAL NETWORKS
# mynetworks_style = subnet | class | host
# mynetworks = 192.168.1.0/24

# WITH INET_INTERFACES IF YOU SPECIFY A SINGLE IPV4 ADDRESS THAT WILL BE THE SOURCED IP OF SMTP CONNECTIONS
# AND CLIENT CONNECTIONS IN GENERAL, BUT YOU ALSO HAVE DEDICATED OPTIONS FOR SMTP AND LMTP
# BOTH INET_INTERFACES AND PROXY_INTERFACES ARE USED IN SMTPD_RESTRICTIONS

# inet_interfaces = all | loopback-only | 192.168.1.1
# proxy_interfaces =
# smtp_bind_address =
# lmtp_bind_address =

inet_protocols = ipv4

# A CLIENT NAME IS SET TO "UNKNOWN" WHEN IT CANNOT BE LOOKED UP OR VERIFIED, OR WHEN NAME LOOKUP IS DISABLED.
# TURNING OFF NAME LOOKUP REDUCES DELAYS DUE TO dns LOOKUP AND INCREASES THE MAXIMAL INBOUND DELIVERY RATE.
smtpd_peername_lookup = yes


# THE UNPRIVILEGED PROCESSES SPAWNED BY MASTER ARE INHERITING THE FOLLOWING UID and GUID
# CHECK THE UNPRIV COLUMN IN MASTER.CF
mail_owner = postfix
setgid_group = postdrop
# NORMALLY THE LOCAL AGENT IS USING THE PRIVILEGES OF THE RECIPIENT TO DELIVER THE MESSAGE, EXCEPT WHEN 
# THE DELIVERY IS FOR AN EXTERNAL FILE OR COMMAND, IN WHICH CASE THE OWNER OF THE FILE OR ALIAS OWNER
# IS USED, BUT IF THAT OWNER IS ROOT, IT FALLS BACK TO DEFAULT_PRIVS
# THE DEFAULT RIGHTS USED BY THE LOCAL(8) DELIVERY AGENT FOR DELIVERY TO AN EXTERNAL FILE OR COMMAND.
# default_privs = nobody


################             LOGGING              ###############


syslog_facility = mail
syslog_name = ${multi_instance_name?{$multi_instance_name}:{postfix}}
# WHEN MAILLOG_FILE IS NOT EMPTY, THE SYSLOG WILL STOP
# maillog_file = /var/log/postfix/postfix.log
# maillog_file_prefixes = /var, /dev/stdout
# maillog_file_rotate_suffix = %Y%m%d-%H%M%S
# maillog_file_compressor = gzip
# SERVICE NAME IS USED ESPECIALLY IN MASTER.CF WITH SYSLOG_NAME, TO DISTINGUISH SPECIFIC DAEMON LOGGING
# EX -O SYSLOG_NAME=POSTFIX/$SERVICE_NAME
# service_name (read-only)

#################           DEBUGGING           ###################
# debug_peer_level = 2
# debug_peer_list = 192.168.1.1, 192.168.1.2


################   SMTP CLIENT SASL AUTHENTICATION  ################

smtp_sasl_auth_enable = no
smtp_sasl_type = cyrus

# A HELPER FOR THE SASL LIBRARY TO FIND THE CONFIG FILE
# smtp_sasl_path =

# POSTFIX SMTP CLIENT LOOKUP TABLES WITH ONE USERNAME:PASSWORD ENTRY PER SENDER, REMOTE HOSTNAME OR NEXT-HOP DOMAIN. 
# smtp_sasl_password_maps = btree:sasl/smtp_sasl_password_maps

# PREVENT REPEATED sasl AUTHENTICATION FAILURES WITH THE SAME REMOTE smtp SERVER HOSTNAME, USERNAME AND PASSWORD.
# smtp_sasl_auth_cache_name = btree:/var/lib/postfix/smtp_sasl_auth_cache

# FROM THE LIST OF SUPPORTED MECHANISM FROM SERVER AND CLIENT, RESTRICT EVEN MORE TO THE ONES HERE
# smtp_sasl_mechanism_filter = plain, login, digest-md5, cram-md5, !gssapi

# YOU CAN ALSO RESTRICT MECHANISMS GENERICALLY BY SPECIFYING CATEGORIES, LIKE BELOW
# smtp_sasl_security_options = noplaintext,noanonymous,noactive,nodictionary
# smtp_sasl_tls_security_options = $smtp_sasl_security_options


###############    SMTPD  SERVER SASL AUTHENTICATION   ##############

smtpd_sasl_auth_enable = no
smtpd_sasl_type = cyrus
broken_sasl_auth_clients = yes

# RESTRICT THE LIST OF MECHANISMS OFFERED BY SMTPD
smtpd_sasl_mechanism_filter = !external, plain, login, digest-md5, cram-md5, static:rest
smtpd_sasl_security_options = noanonymous, noplaintext, noactive, nodictionary
smtpd_sasl_tls_security_options = $smtpd_sasl_security_options
# THE PARAMETER SETTING "SMTPD_TLS_SECURITY_LEVEL = ENCRYPT" IMPLIES "SMTPD_TLS_AUTH_ONLY = YES".
smtpd_tls_auth_only = no
# smtpd_sasl_local_domain =
# SPECIFY ZERO OR MORE DIRECTORIES SEPARATED BY A COLON CHARACTER, OR AN EMPTY VALUE TO USE CYRUS SASL'S BUILT-IN SEARCH PATH. 
cyrus_sasl_config_path = /etc/postfix/sasl:/etc/sasl2:/usr/local/lib/sasl2
smtpd_sasl_path = smtpd
# THE SMTPD_SASL_APPLICATION_NAME IS A LEGACY OPTION THAT WAS REPLACED BY SMTPD_SASL_PATH WHICH SHOULD SPECIFY THE NAME OF THE SASL CONFIG FILE
# smtpd_sasl_application_name = smtpd
# THE SERVICE NAME THAT IS PASSED TO THE SASL PLUG-IN THAT IS SELECTED WITH SMTPD_SASL_TYPE AND SMTPD_SASL_PATH. 
# THIS I THINK IS IMPORTANT WITH REGARD TO SELECTING THE PROPER PAM CONFIG FILE UNDER /ETC/PAM.D/
smtpd_sasl_service = smtp
# REPORT THE SASL AUTHENTICATED USER NAME IN THE SMTPD RECEIVED MESSAGE HEADER. 
smtpd_sasl_authenticated_header = yes
# DO NOT OFFER AUTH SUPPORT TO THE SPECIFIED NETWORKS BELLOW
smtpd_sasl_exception_networks =


###########        SMTP/D TLS SUPPORT OPTIONS           ##########

# YOU ARE STRONGLY ENCOURAGED NOT TO CHANGE THE CIPHERLIST SETTINGS. 
# tls_high_cipherlist (default: see "postconf -d" output)
# tls_low_cipherlist (default: see "postconf -d" output)
# tls_medium_cipherlist (default: see "postconf -d" output)
# tls_null_cipherlist (default: eNULL:!aNULL)
# tls_ssl_options (default: empty)
#	-ENABLLE_MIDDLEBOX_COMPAT, LEGACY_SERVER_CONNECT, NO_TICKET
#	NO_COMPRESSION, NO_RENEGOTIATION, NO_SESSION_RESUMPTION_ON_RENEGOTIATION,
#	PRIORITIZE_CHACHA, 0x40000000
tls_ssl_options = NO_COMPRESSION
# PREVENT POSTFIX FROM APPENDING THE SYSTEM-SUPPLIED DEFAULT CAS AND TRUSTING THIRD-PARTY CERTIFICATES. 
tls_append_default_CA = no


###########         SMTPD (SERVER) TLS OPTIONS             #########

# smtpd_use_tls = no ***Legacy opportunistic TLS option***
# smtpd_enforce_tls = no  ***Legacy option; You should use instead smtpd_tls_security_level***
# REQUEST THAT THE POSTFIX SMTP CLIENT CONNECTS USING THE LEGACY SMTPS PROTOCOL TCP 465 
smtpd_tls_wrappermode = no
# THERE ARE MORE THAN THESE THREE SECURITY LEVELS, BUT THESE ARE MOST COMMON.
# THE ONE USED THE MOST IS MAY WHICH MEANS OPPORTUNISTIC ENCRYPTION WHICH MEANS THAT SERVER ACCEPTS BOTH TLS AND NON-TLS SESSIONS
# smtpd_tls_security_level = none | may | encrypt
# CA CERTIFICATES OF ROOT CAS TRUSTED TO SIGN EITHER REMOTE SMTP CLIENT CERTIFICATES OR INTERMEDIATE CA CERTIFICATES.
# THIS CAN BE A CONCATENATED FILE WITH ALL THE TRUSTED CA CERTIFICATES IN PEM FORMAT, LIKE THE SYSTEM DEFAULT ONE
# IF YOU DO MAKE USE OF CLIENT CERTIFICATES, THE DISTINGUISHED NAMES (DNS) OF THE CERTIFICATION AUTHORITIES LISTED IN SMTPD_TLS_CAFILE
# ARE SENT TO THE REMOTE SMTP CLIENT IN THE CLIENT CERTIFICATE REQUEST MESSAGE, SO THE CLIENT CAN EASILY SELECT ITS CERTIFICATE
# smtpd_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
# SUPPLEMENTARY CA CERTIFICATES. THE NAMES OF THE FILES IN THE CA FOLDER NEEDS TO BE HASHED WITH C_REHASH
# smtpd_tls_CApath = /etc/postfix/pki/ca/
# IN ORDER FOR THE CLIENT TO TRUST THE SERVER CERTIFICATE, THE SERVER CAN SEND ALSO THE CA THAT SIGNED ITS CERTIFICATE
# IF THE SMTPD_TLS_CERT_FILE POINTS TO A CHAIN OF CERTIFICATES WITH THE ONE OF THE SERVER AT THE TOP
# THE REMOTE CLIENT SHOULD RECEIVE FROM THE SERVER ITS CERTIFICATE ALONG WITH THE INTERMEDIARY CERTIFICATES
# UP TO THE ISSUING CA, SO A CONCATENATED FILE CAN BE SPECIFIED HERE.
# CREATE THE SERVER.PEM FILE WITH "CAT SERVER_CERT.PEM INTERMEDIATE_CA.PEM ROOT_CA.PEM > SERVER.PEM". 
# smtpd_tls_cert_file = /etc/postfix/pki/server.pem
# smtpd_tls_key_file = $smtpd_tls_cert_file
# POSTFIX â‰¥ 3.4.  PREFERRED CONFIGURATION INTERFACE IS SMTPD_TLS_CHAIN_FILES.  EACH FILE SPECIFIED HAS THIS STRUCTURE:
# STARTS WITH THE PRIVATE KEY, FOLLOWED BY THE CORRESPONDING CERTIFICATE, AND ANY INTERMEDIATE ISSUER CERTIFICATES.
# IF YOU HAVE SEPARATE FILES, YOU CAN EITHER PUT THEM IN A SINGLE CONCATENATED FILE, OR SPECIFY THE DISTINCT FILES
# IN THE CORRECT ORDER, LIKE IN THE EXAMPLE BELOW
# smtpd_tls_chain_files =
#   /etc/postfix/priv_key.pem,
#    /etc/postfix/server_cert.pem,
#    /etc/postfix/server_ca.pem,
#    /etc/postfix/root_ca.pem

# smtpd_tls_ccert_verifydepth = 9
# IF YOU WANT TO USE CCERT_MAPS, RELAY_CLIENTCERTS, OR REQUIRE_CCERTS YOU NEED TO AKS FOR IT FIRST
# smtpd_tls_ask_ccert = no
# WORKS WITH **MANDATORY TLS ENCRYPTION ONLY**, REQUIRE A **TRUSTED** REMOTE SMTP CLIENT CERTIFICATE IN ORDER 
# TO ALLOW TLS CONNECTIONS TO PROCEED. THIS OPTION IMPLIES "SMTPD_TLS_ASK_CCERT = YES". 
# WITH OPPORTUNISTIC ENCRYPTION THE PARAMETER IS IGNORED
# smtpd_tls_req_ccert = no
# THE DIGEST USED INT CCERT_ACCESS_MAPS AND RELAY_CLIENTCERTS. HERE YOU NEED THE CERTIFICATE OR ITS PUBLIC KEY DIGEST
# smtpd_tls_fingerprint_digest = sha256 | md5 | sha1 | sha512
# ***************
# COMMANDS EXAMPLE
# openssl x509 -noout -fingerprint -sha256 -in cert.pem
# openssl x509 -in cert.pem -noout -pubkey | openssl pkey -pubin -outform DER | openssl dgst -sha256 -v
# ***************
# smtpd_tls_protocols = !SSLv2, !SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
# smtpd_tls_mandatory_protocols = >=TLSv1, <=TLSv1.2
# smtpd_tls_cipherlist *** THIS FEATURE IS AVAILABLE WITH POSTFIX VERSION 2.2. IT IS NOT USED WITH POSTFIX 2.3 AND LATER
# smtpd_tls_ciphers = medium | export | low | medium | high | null 
# smtpd_tls_mandatory_ciphers = $smtpd_tls_ciphers
# smtpd_tls_exclude_ciphers = aNULL, MD5, DES, DES+MD5, AES256-SHA, DES-CB3-MD5
# smtpd_tls_mandatory_exclude_ciphers = $smtpd_tls_exclude_ciphers
# BY DEFAULT, THE OPENSSL SERVER SELECTS THE CLIENT'S MOST PREFERRED CIPHER THAT THE SERVER SUPPORTS.
# SETTING "TLS_PREEMPT_CIPHERLIST = YES" ENABLES SERVER CIPHER PREFERENCES.
# tls_preempt_cipherlist = no
# LOGLEVEL CAN BE FROM 0 TO 4; 0 - DISABLE; 1 - SUMMARY; 2 - ALSO LOG LEVELS; 3 - DUMP TLS NEGOTIATION PROCESS
# smtpd_tls_loglevel = 0
# INCLUDE TLS NEGOTIATED INFORMATION IN THE RECEIVED: HEADER
# smtpd_tls_received_header = no
# FOR POSTFIX â‰¥ 2.11 THIS PARAMETER SHOULD GENERALLY BE LEFT EMPTY. 
# smtpd_tls_session_cache_database = btree:/var/lib/postfix/tls_session_cache.db


###########         SMTP CLIENT TLS OPTIONS        ############

# DO NOT CONFIGURE CLIENT CERTIFICATES UNLESS YOU MUST PRESENT CLIENT TLS CERTIFICATES TO ONE OR MORE SERVERS. 
# CLIENT CERTIFICATES ARE NOT USUALLY NEEDED, AND CAN CAUSE PROBLEMS IN CONFIGURATIONS THAT WORK WELL WITHOUT THEM. 
# THE RECOMMENDED SETTING IS TO LET THE DEFAULTS STAND
# smtp_use_tls = no *** Legacy opportunistic TLS option
# smtp_enforce_tls = no ***Legacy options; You should use smtp_tls_security_level instead
# smtp_tls_security_level = none | may | encrypt | dane | dane-only | fingerprint | verify | secure
# smtp_tls_wrappermode = no ***enabling this also implies smtp_tls_security_level = encrypt
# REQUIRE THAT THE REMOTE SMTP SERVER HOSTNAME MATCHES THE INFORMATION IN THE REMOTE SMTP SERVER CERTIFICATE
# smtp_tls_enforce_peername = yes
# THE TRUSTED SIGNING CA'S WHEN AUTHENTICATING THE SERVER CERTIFICATE
# smtp_tls_CAfile = /etc/postfix/pki/ca.cer
# smtp_tls_CApath = /etc/postfix/pki/ca/
# TO ENABLE REMOTE SMTP SERVERS TO VERIFY THE POSTFIX SMTP CLIENT CERTIFICATE, 
# THE ISSUING CA CERTIFICATES MUST BE MADE AVAILABLE TO THE SERVER. 
# YOU SHOULD INCLUDE THE REQUIRED CERTIFICATES IN THE CLIENT CERTIFICATE FILE, 
# CAT CLIENT_KEY.PEM CLIENT_CERT.PEM INTERMEDIATE_CA.PEM > CHAIN.PEM
# THIS FILE MAY ALSO CONTAIN THE POSTFIX SMTP CLIENT PRIVATE RSA KEY, 
# AND THESE MAY BE THE SAME AS THE POSTFIX SMTP SERVER RSA CERTIFICATE AND KEY FILE.
# KEY1, CERT1, [CHAIN1], KEY2, CERT2, [CHAIN2], ..., KEYN, CERTN, [CHAINN].
# smtp_tls_cert_file = /etc/postfix/pki/client_certs.pem
# smtp_tls_key_file = $smtp_tls_cert_file
# smtp_tls_chain_files = /etc/postfix/pki/packets.lab.pem
# smtp_tls_protocols = !SSLv2, !SSLv3, TLSv1, <=TLSv1.3
# smtp_tls_mandatory_protocols = $smtp_tls_mandatory_protocols
# smtp_tls_cipherlist = ***obsolete
# smtp_tls_ciphers = medium | export | low | high | null
# smtp_tls_mandatory_ciphers = medium
# smtp_tls_exclude_ciphers =
# EXAMPLE OF SMTP_TLS_EXCLUDE CIPHERS ->> aNULL,MD5,DES,DES+MD5,AES256-SHA,DES-CBC3-MD5,kEDH+aRSA
# smtp_tls_mandatory_exclude_ciphers = $smtp_tls_exclude_ciphers
# TRY TO MAKE MULTIPLE DELIVERIES PER TLS-ENCRYPTED CONNECTION.
# smtp_tls_connection_reuse = no
# smtp_tls_fingerprint_digest = md5 | sha1 | sha256
# LIST OF ACCEPTABLE REMOTE SMTP SERVER CERTIFICATE FINGERPRINTS OR PUBLIC KEY FINGERPRINTS
# FOR THE "FINGERPRINT" TLS SECURITY LEVEL (SMTP_TLS_SECURITY_LEVEL = FINGERPRINT)
# openssl x509 -noout -fingerprint -sha256 -in cert.pem
# openssl x509 -in cert.pem -noout -pubkey | openssl pkey -pubin -outform DER | openssl dgst -sha256 -v
#  AT THIS SECURITY LEVEL, CERTIFICATION AUTHORITIES ARE NOT USED, AND CERTIFICATE EXPIRATION TIMES ARE IGNORED. 
# smtp_tls_fingerprint_cert_match =
#  cd:fc:d8:db:f8:c4:82:96:6c:...:28:71:e8:f5:8d:a5:0d:9b:d4:a6
#  dd:5c:ef:f5:c3:bc:64:25:36:...:99:36:06:ce:40:ef:de:2e:ad:a4
# smtp_tls_loglevel = 0
# LOG THE HOSTNAME OF A REMOTE SMTP SERVER THAT OFFERS STARTTLS, WHEN TLS IS NOT ALREADY ENABLED FOR THAT SERVER.
# smtp_tls_note_starttls_offer = no
# OPTIONAL LOOKUP TABLES WITH THE POSTFIX SMTP CLIENT TLS SECURITY POLICY BY NEXT-HOP DESTINATION;
# smtp_tls_policy_maps =
# smtp_tls_session_cache_database = btree:/var/lib/postfix/smtp_cache


#########      LOCAL ADDRESS CLASS      #########

mydestination = sandbox.lab
local_recipient_maps = proxy:unix:passwd.byname $alias_maps
# local_recipient_maps = hash:$config_directory/maps_recipient/local_recipient_maps
alias_maps = hash:$config_directory/maps_alias/aliases
alias_database = hash:$config_directory/maps_alias/aliases
local_transport = local:$myhostname

# IF YOU ARE USING A DIFFERENT TRANSPORT AGENT THAN LOCAL, YOU CAN LEVERAGE ONE OF THE
# COMMAND->TRANSPORT->FALLBACK_TRANSPORT PARAMETERS
# mailbox_command =
# mailbox_command_maps = hash:$config_directory/maps_transport/mailbox_command_maps

# IF THERE ARE NO ALIASES OR .FORWARD FILES TO PROCESS BY THE LOCAL AGENT, BUT THE USER IS
# DEFINED IN THE LOCAL UNIX PASSWD DATABASE, THE DELIVERY WILL BE HANDLED BY THE TRANSPORT AGENT SPECIFIED
# WITH THE FOLLOWING TWO PARAMETERS; THE MESSAGE IS ACTUALLY HANDED TO MAILBOX_TRANSPORT BY THE LOCAL AGENT ITSELF
# mailbox_transport_maps = hash:$config_directory/maps_transport/mailbox_transport_maps
# mailbox_transport = lmtp:remote.lab:24
#
# HOME_MAILBOX IS OVERRIDING MAIL_SPOOL_DIRECTORY, AND BOTH DIRECTIVES WHERE THE MAILBOXES CAN BE FOUND
# IF YOU SPECIFY THE TRAILING SLASH, IT MEANS THE MAILBOX IS IN MAILDIR FORMAT
# home_mailbox = mailbox_file | /Mailbox | /Maildir/
# mail_spool_directory = /var/spool/mailbox | /var/spool/maildir/

# IF THE RECIPIENT ADDRESS IS NOT FOUND BY THE LOCAL_TRANSPORT 
# THEN THE MESSAGE IS HANDED OFF ALLTOGETHER TO THE AGENT SPECIFIED BY FALLBACK_TRANSPORT
# fallback_transport_maps = hash:$config_directory/maps_transport/fallback_transport_maps
# fallback_transport = agent:host:port


# WHERE THE LOCAL AGENT SHOULD FIND .FORWARD FILES; SUPPORTS NAMES EXPANSION
# forward_path = $user/$home/$recipient/$domain
# allow_mail_to_files = alias, forward, include
# allow_mail_to_commands = alias, forward, include

# THE LUSER_RELAY IMPLEMENTS SORT OF A CATCH_ALL FUNCTIONALITY FOR THE LOCAL ADDRESS CLASS
# IN ALIAS_MAPS WE CANNOT HAVE A LOOKUPKEY WITH @, SO WE USE LUSER_RELAY INSTEAD
# VARIABLES AVAILABLE FOR LUSER_RELAY: $domain,$extension,$home,$recipient,$recipient_delimiter,$shell,$user,${name?value},${name:value}
# WE CAN USE THIS FEATURE FOR SMARTHOST
# luser_relay = john.doe@sandbox.lab | $user@$other.host | $local@$other.host

# THE PRECEDENCE OF LOCAL DELIVERY FEATURES FROM HIGH TO LOW IS:
# ALIASES, .FORWARD, MAILBOX_TRANSPORT_MAPS, MAILBOX_TRANSPORT, MAILBOX_COMMAND_MAPS, MAILBOX_COMMAND,
# HOME_MAILBOX, MAIL_SPOOL_DIRECTORY, FALLBACK_TRANSPORT_MAPS, FALLBACK_TRANSPORT


########       VIRTUAL ALIAS CLASS        #######

# THIS CLASS IS KIND OF A POOR MANS MULTIPLE DOMAIN SERVER. I DON'T RECOMMEND ITS USE
# virtual_alias_domains = other.lab
# THE VIRTUAL ALIAS MAPS IS THE ONLY USEFUL PARAMETER HERE
# THE VIRTUAL ALIASES ARE TRIGGERED BEFORE QUEUE, BY THE CLEANUP PROCESS, FOR ALL EMAIL CLASSES
# ONE THING TO REMEMBER THOUGH, IN ALIAS MAPS, YOU CAN USE A CATCH-ALL @ ENTRY
virtual_alias_maps = hash:$config_directory/maps_alias/virtual_alias_maps
# virtual_address_length_limit = 1000
# virtual_alias_expansion_limit = 1000
# virtual_alias_recursion_limit = 1000


##############       VIRTUAL MAILBOX CLASS          ##############

# virtual_maps  ***Legacy option; This was replaced by virtual_mailbox_domains and virtual_mailbox_maps
# virtual_mailbox_domains = virtual.lab
# virtual_mailbox_maps = hash:$config_directory/maps_virtual_mailbox/virtual_mailbox_maps
# virtual_transport = lmtp:unix:/patch/name | lmtp:hostname:port
# virtual_mailbox_base = /var/spool/mail | /var/spool/mail/
# virtual_mailbox_limit (default: 51200000)
# virtual_minimum_uid = 500
# THE TWO LINES BELOW SPECIFY THAT ALL THE VIRTUAL MAILBOXES ARE OWNED BY THE SAME FIXED UID AND GID
# virtual_uid_maps = static:5000
# virtual_git_maps = static:5000



############          VIRTUAL RELAY CLASS        #########

# relay_domains = relay.lab
# relay_recipient_maps = hash:$config_directory/maps_recipient/relay_recipient_maps
# YOU CAN SPECIFY RELAY TRANSPORT WITH NEXTHOP OR NOT. IF YOU 
# DON'T SPECIFY A NEXT HOP, DNS QUERRY WILL BE USED TO FIND ONE
# relay_transport = smtp:[gigi.com]

#############           DEFAULT CLASS             ########

# MESSAGES THAT DO NOT FALL UNDER A SPECIFIC CLASS ARE DELIVERED BY THE DEFAULT TRANSPORT
# WHICH ACTUALLY MEANS, ARE DESTINED FOR THE GREATER INTERNET OUTSIDE
# WITH THIS TRANSPORT, LIKE THE OTHERS YOU CAN SPECIFY AN OPTIONAL NEXT HOP
# default_transport = smtp
# IF YOU HAVE AN EXTRA MAIL GW TOWARDS INTERNET SPECIFY THAT WITH RELAYHOST
# relayhost = domain.lab:25 | [mx.domain.lab]:25


##############          TRANSPORTS              ##############

# THE SYNTAX FOR SPECIFYING A TRANSPORT IS: TRANSPORT = AGENT[:NEXTHOP]
# EX FOR INET NEXTHOP
# default_transport = smtp:mailgw.local:25
# default_transport = lmtp:unix:/path/to/socket
# THE NEXT HOP SYNTAX DEPENDS ON THE SPECIFIC TRANSPORT (SMTP/LMTP/VIRTUAL/ETC)
# THE POSTFIX SMTP+LMTP CLIENT SUPPORTS MULTIPLE  DESTINATIONS  SEPARATED BY COMMA OR WHITESPACE
# xxx_transport = smtp:[mail.gw1]:25, [mail.gw2]:25 *** IM NOT SHURE ABOUT THIS SYNTAC
# MAPPING FROM EMAIL ADDRESSES TO MESSAGE DELIVERY  TRANSPORTS  AND  NEXT-HOP  DESTINATIONS.
# THIS  MAPPING OVERRIDES THE DEFAULT TRANSPORT:NEXTHOP SELECTION THAT IS BUILT INTO POSTFIX
# EXAMPLES OF TRANSPORT MAP ENTRIES:
#  user@domain transport:nexthop
#  domain transport:nexthop
#  * transport:nexthop
#  my.domain :             # USE THE TRANSPORT THAT MATCHES THE ADDRESS DOMAIN CLASS
#  example.com :[gateway.example.com]  # DO NOT TRY AN MX LOOKUP ON SPECIFIED HOST
# transport_maps = hash:$config_directory/maps_transport/default_transport_maps
#
######    CLEANUP PREQUEUE ACTIONS (CANONICAL REWRITE, MASQUERADE, BCC, HEADER/BODY CHECKS) ######

# CLEANUP RECEIVE MESSAGES FROM SMTPD, QMQPD, LMTPD, AND PICKUP DAEMON, BUT ALSO MESSAGES RESUBMITTED
# BOUNCE, POSTMASTER NOTIFICATIONS, MESSAGES FORWARDED BY THE LOCAL TRANSPORT AGENT
# THE PROCESSING STAGES OF CLEANUP ARE: 
# NORMALIZATION, CANONICAL REWRITE, DOMAIN MASQUERADE, VIRTUAL ALIASING, BCC, HEADER AND BODY CHECKS

# cleanup_service_name = cleanup

# THESE APPEND ACTIONS ARE PART OF THE NORMALIZATION PROCESS
# append_at_myorigin = yes
# append_dot_mydomain = yes

# THE CANONICAL REWRITE ACTIONS ARE AFFECTING ONLY THE CLIENTS MENTIONED IN LOCAL_HEADER_REWRITE_CLIENTS
# local_header_rewrite_clients = permit_inet_interfaces, permit_mynetworks, permit_sasl_authenticated, permit_tls_clientcerts, static:all
# remote_header_rewrite_domain = invalid.domain

# THE RECEIVE_OVERRIDE_OPTIONS IS MOST LIKELY TO BE USED IN MASTER.CF TO AFFECT THE BEHAVIOUR OF A FILTER DAEMON 
# receive_override_options = no_unknown_recipient_checks, no_address_mappings, no_milters, no_header_body_checks


# CANONICAL MAPS ALLOW FOR HEADER AND ENVELOPE REWRITE OF BOTH RECIPIENT AND SENDER
# canonical_maps = hash:$config_directory/maps_canonical/canonical_maps
# canonical_classes = envelope_sender, envelope_recipient, header_sender, header_recipient
# YOU CAN GET SELECTIVE IF YOU WANT; CHANGE ONLY THE SENDER FOR EXAMPLE
# recipient_canonical_maps = hash:$config_directory/maps_canonical/recipient_canonical_maps
# recipient_canonical_classes = envelope_recipient, header_recipient
# sender_canonical_maps = hash:$config_directory/maps_canonical/sender_canonical_maps
# sender_canonical_classes = envelope_sender, header_sender
# WITH THE FOLLOWING, THE ORIGINAL RECIPIENT ADDRESS IS STORED IN THE X-ORIGINAL-TO MESSAGE HEADER
# enable_original_recipient (default: yes)

# MASQUERADE IS LIKE LIMITED AUTOMATED REWRITING.
# masquerade_classes = envelope_sender, header_sender, envelope_recipient, header_recipient
# masquerade_domains = sandbox.lab, !nothisone.sandbox.lab
# masquerade_exceptions = nothisone.sandbox.lab

# THESE BCC FEATURES CAN BE EASILY USED FOR JOURNALIZATION
# always_bcc =
# recipient_bcc_maps = 
# sender_bcc_maps =


### BUILT IN CONTENT FILTER      ###

# body_checks (default: empty)
# body_checks_size_limit (default: 51200)
# header_checks (default: empty)
# header_size_limit (default: 102400)

#########       SECURITY AND RELAY CONTROLS         ##########

# message_size_limit = 10240000
# smtpd_recipient_limit = 100
# smtpd_authorized_xclient_hosts =
# smtpd_authorized_xforward_hosts =
# POSTQUEUE FILTERING
# content_filter = 
# PREQUEUE FILTERING (ALTERNATIVE TO MILTER)
# smtpd_proxy_filter =
# default_filter_nexthop = 

smtpd_helo_required = yes
# REQUIRE THAT ADDRESSES RECEIVED IN SMTP MAIL FROM AND RCPT TO COMMANDS ARE ENCLOSED WITH <>,
# AND THAT THOSE ADDRESSES DO NOT CONTAIN RFC 822 STYLE COMMENTS OR PHRASES.
strict_rfc821_envelopes = yes
disable_vrfy_command = yes
# SAFETY NET TO KEEP MAIL QUEUED THAT WOULD OTHERWISE BE RETURNED TO THE SENDER.
soft_bounce = no
# relay_clientcerts = hash:$config_directory/maps_cert/relay_clientcerts

# DELAYING THE REJECT ADDRESSES THE FOLLOWING:
# SOME CLIENTS THAT DO NOT SUPPORT TERMINATING THE SMTP SESSION EARLY IN THE CONVERSATION
# GET THE CHANGE TO COLLECT MORE LOGS ABOUT THE REJECTED CLIENT
# OFFER THE MEANS FOR WRITING MORE COMPLEX POLICIES
smtpd_delay_reject = yes

unknown_address_reject_code = 554
unknown_hostname_reject_code = 554
unknown_client_reject_code = 554

# SPECIFY A LIST OF "PERMIT" ACTION NAMES, "/FILE/NAME" OR "TYPE:TABLE" PATTERNS, SEPARATED BY COMMAS AND/OR WHITESPACE. 
smtpd_log_access_permit_actions = static:all, permit_dnswl_client

# Enforcing the recipient maps even if the corresponding parameter from smtpd_recipient_restrictions is off
smtpd_reject_unlisted_recipient = yes
smtpd_reject_unlisted_sender = no

# IN ADDITION TO THE RESTRICTIONS AND PERMIT ACTIONS SPECIFIC TO STAGES OF THE SMTP CONVERSTION
# WE CAN ALSO USE THE FOLLOWING GENERIC ACTIONS:
# permit, reject, defer, reject_unauth_pipelining, reject_plaintext_session,
# defer_if_reject, defer_if_permit, warn_if_reject, check_policy_service

###   SMTP CLIENT RESTRICTIONS   ###
# Dont' forget about the access lookup values:
# OK, REJECT, DUNNO, DEFER, DISCARD, FILTER, PREPEND, BCC, DEFER_IF_REJECT, DEFER_IF_PERMIT, 4NN, 5NN
# Or the generic parameters which can be used directly:
# reject, defer, defer_if_reject, defer_if_permit, check_policy_service, reject_unauth_pipelining, warn_if_reject

smtpd_client_restrictions =  	
	check_client_access hash:$config_directory/maps_access/client_access_maps, 
#	check_sasl_access hash:$config_directory/maps_access/sasl_access_maps, 
#	check_ccert_access hash:$config_directory/maps_cert/ccert_access_maps,
#	permit_mynetworks, 
#	permit_inet_interfaces, 
#	permit_sasl_authenticated, 
#	permit_tls_all_clientcerts, 
#	permit_tls_clientcerts,
# WHITELIST YOUR CLIENTS HERE; MOST LIKELY YOU WILL HOST YOUR OWN DNS SERVER FOR THIS
#	permit_dnswl_client wl.packets.lab,
# YOU CAN SPECIFY MORE THAN ONE REJECT_RBL_CLIENT RESTRICTION
#	reject_rbl_client zen.spamhaus.org,
# Very restrictive condition. Both normal and reverse DNS must exist
# and match with the client reported ip and hostname
#	reject_unknown_client_hostname,
# A little more permissive variant of the above. Only a reverse DNS entry should exist
#	reject_unknown_reverse_client_hostname		

#--------------------------------------------------------------------------------------#

# SMTP HELO RESTRICTIONS #
smtpd_helo_restrictions = 
# MATCH ON HELO HOSTNAME AND PARENT DOMAINS;
#	check_helo_access hash:/etc/postfix/maps_access/helo_access_maps,
# INVALID HELO HOSTNAMES
#	reject_invalid_helo_hostname,
# NO A OR MX RECORDS FOUND IN DNS FOR THE HOSTNAME
#	reject_unknown_helo_hostname,
#	reject_non_fqdn_helo_hostname,
# HOSTNAME LOOKUP IN A BLACKLIST; YOU CAN ADD MULTIPLE COMMANDS
#	reject_rhsbl_helo_rbl_domain = rhsbl.spamhaus.org

#--------------------------------------------------------------------------------------#	

# smtpd_sender_login_maps = hash:$config_directory/sasl/sender_login_maps

#### SMTP SENDER RESTRICTIONS ####
smtpd_sender_restrictions = 
# MATCH ON MAIL FROM ADDRESS, DOMAIN, PARENT DOMAINS, OR @LOCALPART
# WE ALSO HAVE THE A, MX, AND NS VARIANTS
#	check_sender_access hash:$config_directory/maps_access/sender_access_maps,
# Reject if MAIL FROM matches a key in smtpd_sender_login_maps but the user is not logged in
# Reject loged in users that do not match any MAIL FROM in sender_login_maps
# Reject if MAIL FROM matches a key in smtpd_sender_login_maps but the mapped value doesn't match user name
#	reject_sender_login_mismatch,
# Enforce the sender login mismatch only for logged in users who's user name doesn't match MAIL FROM
#	reject_authenticated_sender_login_mismatch,
# Enforce the sender login mismatch only for matching MAIL FROM who are not logged
#	reject_unauthenticated_sender_login_mismatch,
# Reject logged in users with mismatched MAIL FROM, only for those who are enlisted in sender_login_maps
#	reject_known_sender_login_mismatch,
#	reject_non_fqdn_sender,
# Check the MAIL FROM domain in a blacklist
#	reject_rhsbl_sender rhsbl.spamhaus.org
# Check if the address in MAIL FROM is in the list of valid recipients for its domain class
#	reject_unlisted_sender,
# Reject senders who's MAIL FROM domain doesn't have A or MX record
#	reject_unknown_sender_domain
# Verify the existence of the sender mailbox
#	reject_unverified_sender

#----------------------------------------------------------------------------------------#

# SMTP RECIPIENT RESTRICTIONS #
smtpd_recipient_restrictions =
# Match on RCPT TO address, domain, parent domains, or @localpart
# We also have the a, mx and ns versions of access_map
#	check_recipient_access hash:/etc/postfix/maps_access/recipient_access_maps,
# Authorized destinations are all the local, virtual_alias, virtual_mailbox and relay classes
	permit_auth_destination,
	reject_unauth_destination,
#	defer_unauth_destination,
#	permit_mx_backup,
#	reject_non_fqdn_recipient,
# Check the RCPT TO domain for a valid DNS A or MX record
#	reject_unknown_recipient_domain,
# Enforces the local_recipient_maps, virtual_mailbox_maps, relay_recipient_maps and virtual_alias_maps
	reject_unlisted_recipient,
# Verify the RCPT TO mailbox existence
#	reject_unverified_recipient


# relay_restictions and data_restictions get most of the parameters from client/helo/recipient restrictions

#------------------------------------------------------------------------------------------------#

# SMTP RELAY RESTRICTIONS #
smtpd_relay_restrictions =

#------------------------------------------------------------------------------------------------#

# SMTP DATA RESTRICTIONS #
smtpd_data_restrictions = 

######  SMTP CLIENT FEATURES  ######
# smtp_send_xforward_command = no
# smtp_generic_maps =
# smtp_body_checks =
# smtp_header_checks = 

######  NOTIFICATION CONFIGURATION ######

# First we enable the notification classes we are interested in
notify_classes = resource, software, bounce, 2bounce, protocol, delay, policy

# Then we specify the address for each notification class

# SEND POSTMASTER THE HEADERS OF BOUNCED MAIL, AND TRANSCRIPTS OF THE SMTP SESSION
# bounce_notice_recipient = postmaster
# IF THE UNDELIVERABLE NOTIFICATION CANNOT BE SENT TO THE ORIGINATOR, INFORM THE POSTMASTER
# 2bounce_notice_recipient = postmaster
# SEND TO POSTMASTER COPIES OF THE HEADER OF DELAYED MAIL (MAIL WAITING IN QUEUE FOR A SPECIFIC CONDITION TO END)
# delay_notice_recipient = postmaster
# NOTIFICATIONS ABOUT MAIL REJECTED FOR POLICY REASONS (UCE POLICY)
# policy_notice_recipient = postmaster
# CLIENT OR SERVER PROTOCOL ERRORS
# THE LAST FOUR NOTIFICATION CLASSES (POLICY, PROTOCOL, RESOURCE AND SOFTWARE)
# CAN BE REPLACED BY ERROR_NOTICE_RECIPIENT AS BELOw
# error_notice_recipient = postmaster
# protocol_notice_recipient = postmaster
# resource_notice_recipient = postmaster
# software_notice_recipient = postmaster
# bounce_size_limit (default: 50000)
